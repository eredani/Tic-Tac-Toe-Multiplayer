<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ECGBgBAxAYOQeQGP8f8fj///P////3////8=
</value>
  </data>
</root>